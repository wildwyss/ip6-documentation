
@online{noauthor_introduction_nodate,
	title = {Introduction · Frege Goodness},
	url = {https://dierk.gitbooks.io/fregegoodness/content/},
	urldate = {2023-06-15},
	file = {Introduction · Frege Goodness:/home/andri/Zotero/storage/QQEQFLZN/content.html:text/html},
}

@article{hughes_why_1989,
	title = {Why Functional Programming Matters},
	volume = {32},
	issn = {0010-4620, 1460-2067},
	url = {https://academic.oup.com/comjnl/article-lookup/doi/10.1093/comjnl/32.2.98},
	doi = {10.1093/comjnl/32.2.98},
	abstract = {As software becomes more and more complex, it is more and more important to structure it well. Well-structured software is easy to write and to debug, and provides a collection of modules that can be reused to reduce future programming costs. In this paper we show that two features of functional languages in particular, higher-order functions and lazy evaluation, can contribute signiﬁcantly to modularity. As examples, we manipulate lists and trees, program several numerical algorithms, and implement the alpha-beta heuristic (an algorithm from Artiﬁcial Intelligence used in game-playing programs). We conclude that since modularity is the key to successful programming, functional programming oﬀers important advantages for software development.},
	pages = {98--107},
	number = {2},
	journaltitle = {The Computer Journal},
	shortjournal = {The Computer Journal},
	author = {Hughes, J.},
	urldate = {2023-06-15},
	date = {1989-02-01},
	langid = {english},
	file = {Hughes - 1989 - Why Functional Programming Matters.pdf:/home/andri/Zotero/storage/Z8REGY7C/Hughes - 1989 - Why Functional Programming Matters.pdf:application/pdf},
}

@software{lervag_vimtex_2023,
	title = {{VimTeX}},
	rights = {{MIT}},
	url = {https://github.com/lervag/vimtex},
	abstract = {{VimTeX}: A modern Vim and neovim filetype plugin for {LaTeX} files.},
	author = {Lervåg, Karl Yngve},
	urldate = {2023-06-16},
	date = {2023-06-16},
	note = {original-date: 2013-10-05T11:55:11Z},
	keywords = {filetype-plugin, latex, neovim, tex, vim, vim-plugin, vimtex},
}

@online{noauthor_iteration_2023,
	title = {Iteration protocols - {JavaScript} {MDN}},
	url = {https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols},
	abstract = {Iteration protocols aren't new built-ins or syntax, but protocols. These protocols can be implemented by any object by following some conventions.},
	urldate = {2023-06-16},
	date = {2023-05-03},
	langid = {american},
	file = {Snapshot:/home/andri/Zotero/storage/6GX2WTLV/Iteration_protocols.html:text/html},
}

@online{mdn_prototype_2023,
	title = {Object prototypes - Learn web development {MDN}},
	url = {https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Object_prototypes},
	abstract = {This article has covered {JavaScript} object prototypes, including how prototype object chains allow objects to inherit features from one another, the prototype property and how it can be used to add methods to constructors, and other related topics.},
	urldate = {2023-06-19},
	date = {2023-02-24},
	langid = {american},
}

@online{monads_adit_2013,
	title = {Functors, Applicatives, And Monads In Pictures - adit.io},
	url = {https://www.adit.io/posts/2013-04-17-functors,_applicatives,_and_monads_in_pictures.html},
	urldate = {2023-06-19},
  date = {2013-04-17},
	file = {Functors, Applicatives, And Monads In Pictures - adit.io:/home/andri/Zotero/storage/YR7YS3TU/2013-04-17-functors,_applicatives,_and_monads_in_pictures.html:text/html},
}
